var search_data = {"index":{"searchIndex":["array","codewars","codewarsmodel","darkcobol","datastore","decision","event","launcher","player","hash","launcherhelpers","object","string","ask_player_to_make_decision()","attack!()","available_decisions()","beaten?()","custom_label()","data_store_name()","decisions()","decisions_made()","deep_symbolize_keys()","deep_symbolize_keys()","define_models_getters()","disable_auto_start!()","disable_puts_and_prints()","display_error_messages()","has_a_player_attribute_decision?()","launch()","launcher_with_no_output()","load_all_files()","load_attributes()","new()","new()","new()","new()","next_event()","next_event_in_the_list()","player_input_valid?()","pluralize()","resolve_next_event()","start()","static_next_event()","underscore()","update()","update_player()","welcome()","gemfile","gemfile.lock","readme","logo"],"longSearchIndex":["array","codewars","codewars::codewarsmodel","codewars::darkcobol","codewars::datastore","codewars::decision","codewars::event","codewars::launcher","codewars::player","hash","launcherhelpers","object","string","codewars::launcher#ask_player_to_make_decision()","codewars::darkcobol#attack!()","codewars::event#available_decisions()","codewars::darkcobol#beaten?()","codewars::codewarsmodel#custom_label()","codewars::codewarsmodel#data_store_name()","codewars::event#decisions()","codewars::event#decisions_made()","array#deep_symbolize_keys()","hash#deep_symbolize_keys()","codewars::datastore#define_models_getters()","codewars::launcher::disable_auto_start!()","launcherhelpers#disable_puts_and_prints()","codewars::launcher#display_error_messages()","codewars::event#has_a_player_attribute_decision?()","codewars::launcher#launch()","launcherhelpers#launcher_with_no_output()","codewars::launcher::load_all_files()","codewars::codewarsmodel#load_attributes()","codewars::codewarsmodel::new()","codewars::darkcobol::new()","codewars::datastore::new()","codewars::launcher::new()","codewars::decision#next_event()","codewars::event#next_event_in_the_list()","codewars::event#player_input_valid?()","string#pluralize()","codewars::event#resolve_next_event()","codewars::launcher#start()","codewars::event#static_next_event()","string#underscore()","codewars::player#update()","codewars::decision#update_player()","codewars::launcher#welcome()","","","",""],"info":[["Array","","Array.html","",""],["CodeWars","","CodeWars.html","",""],["CodeWars::CodeWarsModel","","CodeWars/CodeWarsModel.html","","<p>Base CodeWarsModel class Can be used later on to add model global features …\n"],["CodeWars::DarkCobol","","CodeWars/DarkCobol.html","","<p>This class represents the boss\n"],["CodeWars::DataStore","","CodeWars/DataStore.html","","<p>Main CodeWars Data Store Data is loaded in memory through data yml files in /data folder\n"],["CodeWars::Decision","","CodeWars/Decision.html","",""],["CodeWars::Event","","CodeWars/Event.html","","\n<pre class=\"ruby\"><span class=\"ruby-constant\">This</span> <span class=\"ruby-identifier\">is</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">game</span> <span class=\"ruby-identifier\">events</span> <span class=\"ruby-identifier\">model</span>\n</pre>\n<p>It is in charge of the different events taking place\n"],["CodeWars::Launcher","","CodeWars/Launcher.html","",""],["CodeWars::Player","","CodeWars/Player.html","","<p>This class represents the player\n"],["Hash","","Hash.html","",""],["LauncherHelpers","","LauncherHelpers.html","",""],["Object","","Object.html","",""],["String","","String.html","",""],["ask_player_to_make_decision","CodeWars::Launcher","CodeWars/Launcher.html#method-i-ask_player_to_make_decision","(event)","<p>This methods :\n<p>shows the player available decisions\n<p>asks the player to choose the decision\n"],["attack!","CodeWars::DarkCobol","CodeWars/DarkCobol.html#method-i-attack-21","(life_points_attack)","<p>@return [Integer] life_points\n\n"],["available_decisions","CodeWars::Event","CodeWars/Event.html#method-i-available_decisions","()","<p>Returns only attached available (non-made) decisions\n<p>@return [Decision]\n\n"],["beaten?","CodeWars::DarkCobol","CodeWars/DarkCobol.html#method-i-beaten-3F","()","<p>@return [Boolean]\n\n"],["custom_label","CodeWars::CodeWarsModel","CodeWars/CodeWarsModel.html#method-i-custom_label","()","<p>FIXME : Move this to an included shared “conern” class ! Make any “label field” customized …\n"],["data_store_name","CodeWars::CodeWarsModel","CodeWars/CodeWarsModel.html#method-i-data_store_name","()","<p>Returns the data store instance name (underscored, pluralized, symoblized)\n<p>@return [String]\n\n"],["decisions","CodeWars::Event","CodeWars/Event.html#method-i-decisions","()","<p>Search for any decisions attached to the event\n<p>@return [Decision]\n\n"],["decisions_made","CodeWars::Event","CodeWars/Event.html#method-i-decisions_made","()","<p>Returns only attached decisions made\n<p>@return [Decision]\n\n"],["deep_symbolize_keys","Array","Array.html#method-i-deep_symbolize_keys","()","<p>Missing helpfull rails #deep_symbolize_keys method in pure ruby Workaround using JSON lib found @ stackoverflow.com/questions/24927653/how-to-elegantly-symbolize-keys-for-a-nested-hash …\n"],["deep_symbolize_keys","Hash","Hash.html#method-i-deep_symbolize_keys","()","<p>Missing helpfull rails #deep_symbolize_keys method in pure ruby Workaround using JSON lib found @ stackoverflow.com/questions/24927653/how-to-elegantly-symbolize-keys-for-a-nested-hash …\n"],["define_models_getters","CodeWars::DataStore","CodeWars/DataStore.html#method-i-define_models_getters","()","<p>Sets up models getters dynamically (#events, #decisions)\n"],["disable_auto_start!","CodeWars::Launcher","CodeWars/Launcher.html#method-c-disable_auto_start-21","()","<p>Prevent from launching the game automatically Usefull for tests suite !\n<p>@return [Boolean]\n\n"],["disable_puts_and_prints","LauncherHelpers","LauncherHelpers.html#method-i-disable_puts_and_prints","()",""],["display_error_messages","CodeWars::Launcher","CodeWars/Launcher.html#method-i-display_error_messages","(has_exceeded_attempts, is_a_numbered_input)","<p>Shows display error messages\n<p>@param [Boolean] has_exceeded_attempts\n<p>@param [Boolean] is_a_numbered_input …\n"],["has_a_player_attribute_decision?","CodeWars::Event","CodeWars/Event.html#method-i-has_a_player_attribute_decision-3F","()","<p>Wether or not the event asks for a player input that will update any of his attribtes (name?)\n<p>@return …\n\n"],["launch","CodeWars::Launcher","CodeWars/Launcher.html#method-i-launch","(event, from_decision = nil)","<p>Launches the events on the screen Recursive method accepting two params\n<p>@param [Event] event The event …\n"],["launcher_with_no_output","LauncherHelpers","LauncherHelpers.html#method-i-launcher_with_no_output","()",""],["load_all_files","CodeWars::Launcher","CodeWars/Launcher.html#method-c-load_all_files","()","<p>Loads all needed files for the game\n"],["load_attributes","CodeWars::CodeWarsModel","CodeWars/CodeWarsModel.html#method-i-load_attributes","(data = {})","<p>Loads hash attributes to instance attributes\n<p>@param Hash data to load\n\n"],["new","CodeWars::CodeWarsModel","CodeWars/CodeWarsModel.html#method-c-new","()",""],["new","CodeWars::DarkCobol","CodeWars/DarkCobol.html#method-c-new","()",""],["new","CodeWars::DataStore","CodeWars/DataStore.html#method-c-new","()",""],["new","CodeWars::Launcher","CodeWars/Launcher.html#method-c-new","()","<p>Initilaze the app, gets the first event to pass it on and get the game on !\n"],["next_event","CodeWars::Decision","CodeWars/Decision.html#method-i-next_event","()","<p>@return [Event] next event saved in store\n\n"],["next_event_in_the_list","CodeWars::Event","CodeWars/Event.html#method-i-next_event_in_the_list","()","<p>Returns next event in the list\n<p>@return [Event]\n\n"],["player_input_valid?","CodeWars::Event","CodeWars/Event.html#method-i-player_input_valid-3F","(player_input)","<p>Returns wether or not the player input is considered valid\n<p>@param [String] player_input\n<p>@return [Boolean] …\n"],["pluralize","String","String.html#method-i-pluralize","()","<p>@return [String]\n\n"],["resolve_next_event","CodeWars::Event","CodeWars/Event.html#method-i-resolve_next_event","(current_decision = nil)","<p>This methods is in charge of resolving next event to display based on any current decision the player …\n"],["start","CodeWars::Launcher","CodeWars/Launcher.html#method-i-start","()","<p>Starts the game ! Shows the welcome section &amp; launches the first event\n"],["static_next_event","CodeWars::Event","CodeWars/Event.html#method-i-static_next_event","()","<p>Returns the next event saved in store through #next_event_slug based on #next_event_slug attribute\n<p>@return …\n\n"],["underscore","String","String.html#method-i-underscore","()","<p>@return [String]\n\n"],["update","CodeWars::Player","CodeWars/Player.html#method-i-update","(attributes)","<p>This methods sets attributes based on given hash attributes\n<p>@param Hash attributes\n\n"],["update_player","CodeWars::Decision","CodeWars/Decision.html#method-i-update_player","(player_input)","<p>This methods updates #current_player_input_attribute player attribute with given\n<p>@param [String] player_input …\n"],["welcome","CodeWars::Launcher","CodeWars/Launcher.html#method-i-welcome","()","<p>Shows the game logo &amp; welcome text\n"],["Gemfile","","Gemfile.html","","<p>ruby &#39;2.4.1&#39; source &#39;rubygems.org&#39; gem &#39;colorize&#39; gem &#39;rdoc&#39; gem &#39;require_all&#39; …\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>GEM\n\n<pre>remote: https://rubygems.org/\nspecs:\n  ast (2.4.0)\n  colorize (0.8.1)\n  diff-lcs (1.3)\n  jaro_winkler ...</pre>\n"],["README","","README_md.html","","<p>CodeWars\n<p>This a little role-player game around StarWars theme ! Some “easter eggs” have been …\n"],["logo","","app/assets/logo_txt.html","","\n<pre>  _____ ____  _____  ______\n / ____/ __ \\|  __ \\|  ____|\n| |   | |  | | |  | | |__\n| |   | |  | | |  ...</pre>\n"]]}}